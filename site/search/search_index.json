{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kobo API Python Client","text":"<p>A Python wrapper for the KoBoToolbox API v2 that provides easy access to KoBoToolbox data and form management.</p>"},{"location":"#overview","title":"Overview","text":"<p>This library provides a simple interface to interact with KoBoToolbox forms and data through their REST API. KoBoToolbox is an open-source tool for designing, collecting, and analyzing data in humanitarian contexts.</p>"},{"location":"#quick-install","title":"Quick Install","text":"<p>Install the package from PyPI:</p> <pre><code>pip install kobo-api-py\n</code></pre> <p>For development with all extras:</p> <pre><code>pip install -e .[dev,docs]\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from kobo_api import KoboClient\n\n# Initialize client with server URL and token\nclient = KoboClient(\n    server_url=\"https://kobo.example.com\",\n    token=\"your-api-token\"\n)\n\n# Check if the server is reachable\nif client.ping():\n    print(\"Connected to KoBoToolbox!\")\n\n# Get all assets (forms)\nassets = client.get_assets()\nfor asset in assets:\n    print(f\"Form: {asset['name']} (ID: {asset['uid']})\")\n\n# Get data from a specific form\nif assets:\n    asset_id = assets[0]['uid']\n    data = client.get_asset_data(asset_id)\n    print(f\"Form has {data.get('count', 0)} submissions\")\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple authentication with server URL and token</li> <li>Configurable request caching for better performance</li> <li>Built-in retry logic for reliable API calls</li> <li>Support for all major KoBoToolbox API v2 endpoints</li> <li>Type hints for better development experience</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation Guide - Detailed installation instructions</li> <li>Usage Guide - Examples and common patterns</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>This page provides detailed documentation for all public classes and methods in the Kobo API Python Client.</p>"},{"location":"api/#koboclient","title":"KoboClient","text":"Source code in <code>kobo_api/kobo_client.py</code> <pre><code>class KoboClient:\n    def __init__(\n        self,\n        server_url: str | None = None,\n        token: str | None = None,\n        cache: bool = True,\n        cache_ttl: int = 36000,\n    ) -&gt; None:\n        config = dotenv_values(\".env\")\n        server_url = server_url or config.get(\"URL\")\n        if server_url is None:\n            raise ValueError(\n                \"Server URL must be provided either in .env file or as an argument.\"\n            )\n        token = token or config.get(\"TOKEN\")\n        if token is None:\n            raise ValueError(\n                \"Token must be provided either in .env file or as an argument.\"\n            )\n\n        self.server_url: str = server_url.rstrip(\"/\")  # Normalize URL\n        self.token: str = token\n        self.cache_enabled: bool = cache\n        self.headers: Mapping[str, str] = {\n            \"Authorization\": f\"Token {self.token}\",\n            \"Accept\": \"application/json\",\n            \"User-Agent\": \"KoboClient/1.0\",\n        }\n        self.session: requests.Session = self._make_session(\n            cache=cache, cache_ttl=cache_ttl\n        )\n\n    def _make_session(\n        self, cache: bool = True, cache_ttl: int = 3600\n    ) -&gt; requests.Session:\n        \"\"\"Create a requests session with the necessary headers.\"\"\"\n        if cache:\n            session = requests_cache.CachedSession(\n                \"kobo_cache\",\n                expire_after=cache_ttl,\n                allowable_codes=(\n                    200,\n                    404,\n                ),  # Cache 404s to avoid repeated failed requests\n            )\n        else:\n            session = requests.Session()\n\n        retry = Retry(\n            total=3,\n            connect=2,\n            read=2,\n            backoff_factor=0.3,\n            status_forcelist=(429, 500, 502, 503, 504),\n            allowed_methods=(\"GET\", \"HEAD\", \"OPTIONS\"),\n            raise_on_status=False,\n        )\n        adapter = HTTPAdapter(pool_connections=100, pool_maxsize=100, max_retries=retry)\n\n        session.mount(\"https://\", adapter)\n        session.mount(\"http://\", adapter)\n        session.headers.update(self.headers)\n        return session\n\n    def _get(self, path: str, **kwargs) -&gt; dict[str, Any]:\n        \"\"\"Helper method to perform a GET request.\"\"\"\n        url = urljoin(f\"{self.server_url}/\", path.lstrip(\"/\"))\n        logger.debug(f\"GET request to {url}\")\n        response = self.session.get(url, **kwargs)\n        response.raise_for_status()\n        return response.json()\n\n    def clear_cache(self) -&gt; None:\n        \"\"\"Clear the entire cache.\"\"\"\n        if self.cache_enabled and hasattr(self.session, \"cache\"):\n            assert isinstance(self.session, requests_cache.CachedSession)\n            self.session.cache.clear()\n            logger.info(\"Cache cleared\")\n\n    def ping(self) -&gt; bool:\n        \"\"\"Check if the Kobo server is reachable.\"\"\"\n        try:\n            response = self.session.get(\n                urljoin(f\"{self.server_url}/\", \"api/v2/assets/hash\"),\n                headers=self.headers,\n            )\n            return response.status_code == 200\n        except requests.RequestException:\n            return False\n\n    def get_assets(self) -&gt; list[dict[str, Any]]:\n        \"\"\"Get a list of assets from the Kobo server.\"\"\"\n        response = self._get(\"api/v2/assets\")\n        return response.get(\"results\", [])\n\n    def get_asset(self, asset_id: str) -&gt; dict[str, Any]:\n        \"\"\"Get a single asset by its ID.\"\"\"\n        return self._get(f\"api/v2/assets/{asset_id}\")\n\n    def get_asset_data(self, asset_id: str, **kwargs) -&gt; dict[str, Any]:\n        \"\"\"Get asset data (submissions).\"\"\"\n        return self._get(f\"api/v2/assets/{asset_id}/data\", **kwargs)\n\n    def get_assets_hash(self) -&gt; str:\n        \"\"\"Get the hash of all assets.\"\"\"\n        response = self._get(\"api/v2/assets/hash\")\n        return response.get(\"hash\", \"\")\n</code></pre>"},{"location":"api/#kobo_api.KoboClient.__init__","title":"<code>__init__(server_url=None, token=None, cache=True, cache_ttl=36000)</code>","text":"Source code in <code>kobo_api/kobo_client.py</code> <pre><code>def __init__(\n    self,\n    server_url: str | None = None,\n    token: str | None = None,\n    cache: bool = True,\n    cache_ttl: int = 36000,\n) -&gt; None:\n    config = dotenv_values(\".env\")\n    server_url = server_url or config.get(\"URL\")\n    if server_url is None:\n        raise ValueError(\n            \"Server URL must be provided either in .env file or as an argument.\"\n        )\n    token = token or config.get(\"TOKEN\")\n    if token is None:\n        raise ValueError(\n            \"Token must be provided either in .env file or as an argument.\"\n        )\n\n    self.server_url: str = server_url.rstrip(\"/\")  # Normalize URL\n    self.token: str = token\n    self.cache_enabled: bool = cache\n    self.headers: Mapping[str, str] = {\n        \"Authorization\": f\"Token {self.token}\",\n        \"Accept\": \"application/json\",\n        \"User-Agent\": \"KoboClient/1.0\",\n    }\n    self.session: requests.Session = self._make_session(\n        cache=cache, cache_ttl=cache_ttl\n    )\n</code></pre>"},{"location":"api/#kobo_api.KoboClient.ping","title":"<code>ping()</code>","text":"<p>Check if the Kobo server is reachable.</p> Source code in <code>kobo_api/kobo_client.py</code> <pre><code>def ping(self) -&gt; bool:\n    \"\"\"Check if the Kobo server is reachable.\"\"\"\n    try:\n        response = self.session.get(\n            urljoin(f\"{self.server_url}/\", \"api/v2/assets/hash\"),\n            headers=self.headers,\n        )\n        return response.status_code == 200\n    except requests.RequestException:\n        return False\n</code></pre>"},{"location":"api/#kobo_api.KoboClient.get_assets","title":"<code>get_assets()</code>","text":"<p>Get a list of assets from the Kobo server.</p> Source code in <code>kobo_api/kobo_client.py</code> <pre><code>def get_assets(self) -&gt; list[dict[str, Any]]:\n    \"\"\"Get a list of assets from the Kobo server.\"\"\"\n    response = self._get(\"api/v2/assets\")\n    return response.get(\"results\", [])\n</code></pre>"},{"location":"api/#kobo_api.KoboClient.get_asset","title":"<code>get_asset(asset_id)</code>","text":"<p>Get a single asset by its ID.</p> Source code in <code>kobo_api/kobo_client.py</code> <pre><code>def get_asset(self, asset_id: str) -&gt; dict[str, Any]:\n    \"\"\"Get a single asset by its ID.\"\"\"\n    return self._get(f\"api/v2/assets/{asset_id}\")\n</code></pre>"},{"location":"api/#kobo_api.KoboClient.get_asset_data","title":"<code>get_asset_data(asset_id, **kwargs)</code>","text":"<p>Get asset data (submissions).</p> Source code in <code>kobo_api/kobo_client.py</code> <pre><code>def get_asset_data(self, asset_id: str, **kwargs) -&gt; dict[str, Any]:\n    \"\"\"Get asset data (submissions).\"\"\"\n    return self._get(f\"api/v2/assets/{asset_id}/data\", **kwargs)\n</code></pre>"},{"location":"api/#kobo_api.KoboClient.get_assets_hash","title":"<code>get_assets_hash()</code>","text":"<p>Get the hash of all assets.</p> Source code in <code>kobo_api/kobo_client.py</code> <pre><code>def get_assets_hash(self) -&gt; str:\n    \"\"\"Get the hash of all assets.\"\"\"\n    response = self._get(\"api/v2/assets/hash\")\n    return response.get(\"hash\", \"\")\n</code></pre>"},{"location":"api/#kobo_api.KoboClient.clear_cache","title":"<code>clear_cache()</code>","text":"<p>Clear the entire cache.</p> Source code in <code>kobo_api/kobo_client.py</code> <pre><code>def clear_cache(self) -&gt; None:\n    \"\"\"Clear the entire cache.\"\"\"\n    if self.cache_enabled and hasattr(self.session, \"cache\"):\n        assert isinstance(self.session, requests_cache.CachedSession)\n        self.session.cache.clear()\n        logger.info(\"Cache cleared\")\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>This page will contain release notes and changelog information for the Kobo API Python Client.</p>"},{"location":"changelog/#future-releases","title":"Future Releases","text":"<p>Release notes will be added here as new versions are published. You can also check the GitHub Releases page for the latest information.</p>"},{"location":"changelog/#current-version","title":"Current Version","text":"<p>v0.1.0 - Initial development version</p> <ul> <li>Initial implementation of KoboClient</li> <li>Support for basic KoBoToolbox API v2 operations</li> <li>Configurable caching and retry logic</li> <li>Environment variable configuration support</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#standard-installation","title":"Standard Installation","text":"<p>Install the package from PyPI using pip:</p> <pre><code>pip install kobo-api-py\n</code></pre>"},{"location":"installation/#optional-extras","title":"Optional Extras","text":"<p>The package includes optional dependency groups for different use cases:</p>"},{"location":"installation/#development-dependencies","title":"Development Dependencies","text":"<p>For contributing to the project or running tests:</p> <pre><code>pip install kobo-api-py[dev]\n</code></pre> <p>This includes: - <code>pytest</code> - Testing framework - <code>pytest-cov</code> - Coverage reporting - <code>pytest-mock</code> - Mocking utilities - <code>responses</code> - HTTP response mocking - <code>requests-mock</code> - Request mocking</p>"},{"location":"installation/#documentation-dependencies","title":"Documentation Dependencies","text":"<p>For building and serving the documentation:</p> <pre><code>pip install kobo-api-py[docs]\n</code></pre> <p>This includes: - <code>mkdocs</code> - Documentation generator - <code>mkdocs-material</code> - Material Design theme - <code>mkdocstrings</code> - API documentation from docstrings - Additional MkDocs plugins</p>"},{"location":"installation/#all-dependencies","title":"All Dependencies","text":"<p>To install everything (useful for development):</p> <pre><code>pip install kobo-api-py[dev,docs]\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>If you want to contribute to the project:</p> <ol> <li> <p>Clone the repository:    <code>bash    git clone https://github.com/ig-impact/kobo-api-py.git    cd kobo-api-py</code></p> </li> <li> <p>Install in editable mode with development dependencies:    <code>bash    pip install -e .[dev]</code></p> </li> <li> <p>Run the tests to verify installation:    <code>bash    pytest</code></p> </li> </ol>"},{"location":"installation/#environment-setup","title":"Environment Setup","text":"<p>The library supports configuration through environment variables. Create a <code>.env</code> file in your project root:</p> <pre><code>URL=https://your-kobo-instance.com\nTOKEN=your-api-token\n</code></pre> <p>Or set environment variables directly:</p> <pre><code>export URL=\"https://your-kobo-instance.com\"\nexport TOKEN=\"your-api-token\"\n</code></pre>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>Active KoBoToolbox instance</li> <li>Valid API token</li> </ul>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#connection-issues","title":"Connection Issues","text":"<p>If you're having trouble connecting:</p> <ol> <li>Verify your server URL is correct (should not end with <code>/</code>)</li> <li>Check that your API token is valid</li> <li>Ensure your KoBoToolbox instance supports API v2</li> <li>Test the connection manually using <code>client.ping()</code></li> </ol>"},{"location":"installation/#import-errors","title":"Import Errors","text":"<p>If you get import errors:</p> <ol> <li>Ensure the package is installed: <code>pip list | grep kobo-api-py</code></li> <li>Try reinstalling: <code>pip uninstall kobo-api-py &amp;&amp; pip install kobo-api-py</code></li> <li>Check your Python version: <code>python --version</code></li> </ol>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide covers common usage patterns and examples for the Kobo API Python Client.</p>"},{"location":"usage/#basic-setup","title":"Basic Setup","text":""},{"location":"usage/#authentication","title":"Authentication","text":"<p>The client supports multiple ways to provide authentication credentials:</p>"},{"location":"usage/#method-1-direct-parameters","title":"Method 1: Direct Parameters","text":"<pre><code>from kobo_api import KoboClient\n\nclient = KoboClient(\n    server_url=\"https://kobo.example.com\",\n    token=\"your-api-token\"\n)\n</code></pre>"},{"location":"usage/#method-2-environment-variables","title":"Method 2: Environment Variables","text":"<p>Set environment variables and initialize without parameters:</p> <pre><code>import os\n\n# Set environment variables\nos.environ['URL'] = \"https://kobo.example.com\"\nos.environ['TOKEN'] = \"your-api-token\"\n\n# Initialize client (will read from environment)\nclient = KoboClient()\n</code></pre>"},{"location":"usage/#method-3-env-file","title":"Method 3: .env File","text":"<p>Create a <code>.env</code> file in your working directory:</p> <pre><code>URL=https://kobo.example.com\nTOKEN=your-api-token\n</code></pre> <p>Then initialize the client:</p> <pre><code>from kobo_api import KoboClient\n\n# Will automatically read from .env file\nclient = KoboClient()\n</code></pre>"},{"location":"usage/#client-configuration","title":"Client Configuration","text":"<p>You can configure caching and other options:</p> <pre><code>client = KoboClient(\n    server_url=\"https://kobo.example.com\",\n    token=\"your-api-token\",\n    cache=True,           # Enable response caching (default)\n    cache_ttl=3600       # Cache TTL in seconds (default: 36000)\n)\n</code></pre>"},{"location":"usage/#common-operations","title":"Common Operations","text":""},{"location":"usage/#connection-testing","title":"Connection Testing","text":"<p>Always test your connection first:</p> <pre><code>if client.ping():\n    print(\"Successfully connected to KoBoToolbox\")\nelse:\n    print(\"Failed to connect - check your credentials and URL\")\n</code></pre>"},{"location":"usage/#working-with-assets-forms","title":"Working with Assets (Forms)","text":""},{"location":"usage/#list-all-assets","title":"List All Assets","text":"<pre><code># Get all assets/forms\nassets = client.get_assets()\n\nfor asset in assets:\n    print(f\"Name: {asset['name']}\")\n    print(f\"ID: {asset['uid']}\")\n    print(f\"Asset Type: {asset.get('asset_type', 'N/A')}\")\n    print(\"---\")\n</code></pre>"},{"location":"usage/#get-specific-asset","title":"Get Specific Asset","text":"<pre><code># Get details for a specific asset\nasset_id = \"your-asset-id\"\nasset = client.get_asset(asset_id)\n\nprint(f\"Asset name: {asset['name']}\")\nprint(f\"Created: {asset['date_created']}\")\nprint(f\"Owner: {asset['owner__username']}\")\n</code></pre>"},{"location":"usage/#working-with-form-data","title":"Working with Form Data","text":""},{"location":"usage/#get-form-submissions","title":"Get Form Submissions","text":"<pre><code># Get all submissions for a form\nasset_id = \"your-asset-id\"\ndata = client.get_asset_data(asset_id)\n\nprint(f\"Total submissions: {data.get('count', 0)}\")\n\n# Iterate through submissions\nfor submission in data.get('results', []):\n    print(f\"Submission ID: {submission['_id']}\")\n    print(f\"Submitted: {submission['_submission_time']}\")\n    # Access form fields directly\n    # print(f\"Field value: {submission.get('field_name')}\")\n</code></pre>"},{"location":"usage/#filtered-data-retrieval","title":"Filtered Data Retrieval","text":"<pre><code># Get data with query parameters\ndata = client.get_asset_data(\n    asset_id,\n    limit=100,                    # Limit number of results\n    offset=0,                     # Skip first N results\n    sort='{\"_submission_time\": 1}', # Sort by submission time\n    fields='[\"field1\", \"field2\"]'   # Only include specific fields\n)\n</code></pre>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#cache-management","title":"Cache Management","text":"<pre><code># Clear the cache when needed\nclient.clear_cache()\n\n# Disable cache for sensitive operations\nclient_no_cache = KoboClient(\n    server_url=\"https://kobo.example.com\",\n    token=\"your-api-token\",\n    cache=False\n)\n</code></pre>"},{"location":"usage/#error-handling","title":"Error Handling","text":"<pre><code>import requests\n\ntry:\n    assets = client.get_assets()\nexcept requests.HTTPError as e:\n    if e.response.status_code == 401:\n        print(\"Authentication failed - check your token\")\n    elif e.response.status_code == 404:\n        print(\"Resource not found\")\n    else:\n        print(f\"HTTP error: {e}\")\nexcept requests.RequestException as e:\n    print(f\"Network error: {e}\")\n</code></pre>"},{"location":"usage/#batch-operations","title":"Batch Operations","text":"<pre><code># Process multiple assets efficiently\nassets = client.get_assets()\n\nfor asset in assets:\n    try:\n        # Get data for each asset\n        data = client.get_asset_data(asset['uid'], limit=10)\n        print(f\"{asset['name']}: {data.get('count', 0)} submissions\")\n    except requests.HTTPError as e:\n        print(f\"Failed to get data for {asset['name']}: {e}\")\n</code></pre>"},{"location":"usage/#performance-tips","title":"Performance Tips","text":"<ol> <li>Use caching: Enable caching for read-heavy operations (enabled by default)</li> <li>Limit results: Use <code>limit</code> parameter to avoid downloading large datasets</li> <li>Specific fields: Use <code>fields</code> parameter to only retrieve needed data</li> <li>Connection reuse: Reuse the same client instance for multiple requests</li> </ol>"},{"location":"usage/#best-practices","title":"Best Practices","text":"<ol> <li>Environment variables: Store credentials in environment variables, not in code</li> <li>Error handling: Always wrap API calls in try-catch blocks</li> <li>Rate limiting: Be mindful of API rate limits in production</li> <li>Data validation: Validate form data before processing</li> <li>Logging: Use logging to track API usage and debug issues</li> </ol> <pre><code>import logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n# The client uses loguru for internal logging\n# Set appropriate log levels for debugging\n</code></pre>"}]}